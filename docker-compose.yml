services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: rainbobit-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - /home/user/mysql/init:/docker-entrypoint-initdb.d
      - /home/user/mysql/conf:/etc/mysql/conf.d
    networks:
      - rainbobit-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: rainbobit-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
      - /home/user/redis/conf:/etc/redis:ro
    networks:
      - rainbobit-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      timeout: 10s
      retries: 5
      interval: 30s

  # 后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rainbobit-backend
    environment:
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      EMAIL_SENDER_EMAIL: ${SENDER_EMAIL}
      EMAIL_SENDER_PASSWORD: ${SENDER_PASSWORD}
      RAINBOBIT_OSS_ENDPOINT: ${OSS_ENDPOINT}
      RAINBOBIT_OSS_ACCESS_KEY_ID: ${OSS_ACCESS_KEY_ID}
      RAINBOBIT_OSS_ACCESS_KEY_SECRET: ${OSS_ACCESS_KEY_SECRET}
      RAINBOBIT_OSS_BUCKET_NAME: ${OSS_BUCKET_NAME}
      RAINBOBIT_OSS_DOMAIN: ${OSS_DOMAIN}
      RAINBOBIT_OSS_REGION: ${OSS_REGION}
      SKY_JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      LOG_HOME: ${LOG_HOME}
    ports:
      - "${BACKEND_PORT}:7777"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rainbobit-network
    volumes:
      - backend_logs:${LOG_HOME}
    restart: unless-stopped

  # 博客前端 - 使用预构建静态文件
  frontend-blog:
    image: nginx:alpine
    container_name: rainbobit-frontend-blog
    ports:
      - "${FRONTEND_BLOG_PORT}:80"
    volumes:
      - /home/user/nginx/blog:/usr/share/nginx/html:ro
      - /home/user/nginx/conf/blog.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - rainbobit-network
    restart: unless-stopped

  # 管理后台前端 - 使用预构建静态文件
  frontend-admin:
    image: nginx:alpine
    container_name: rainbobit-frontend-admin
    ports:
      - "${FRONTEND_ADMIN_PORT}:80"
    volumes:
      - /home/user/nginx/admin:/usr/share/nginx/html:ro
      - /home/user/nginx/conf/admin.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - rainbobit-network
    restart: unless-stopped

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: rainbobit-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /home/user/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - /home/user/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend-blog
      - frontend-admin
    networks:
      - rainbobit-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  rainbobit-network:
    driver: bridge
